{"name":"Slugid-go","tagline":"A go (golang) port of https://github.com/taskcluster/slugid","body":"slugid-go - Compressed UUIDs for go (golang)\r\n============================================\r\n\r\n<img src=\"https://tools.taskcluster.net/lib/assets/taskcluster-120.png\" />\r\n\r\n[![Build Status](https://travis-ci.org/taskcluster/slugid-go.svg?branch=master)](http://travis-ci.org/taskcluster/slugid-go)\r\n[![Coverage Status](https://coveralls.io/repos/taskcluster/slugid-go/badge.svg?branch=master&service=github)](https://coveralls.io/github/taskcluster/slugid-go?branch=master)\r\n[![License](https://img.shields.io/badge/license-MPL%202.0-orange.svg)](https://github.com/taskcluster/slugid-go/blob/master/LICENSE)\r\n\r\nslugid-go provides:\r\n\r\n* A go (golang) module for generating v4 UUIDs and encoding them into 22\r\ncharacter URL-safe base64 slug representation (see [RFC 4648 sec.\r\n5](http://tools.ietf.org/html/rfc4648#section-5)).\r\n* A command line tool to provides the same functions\r\n\r\nSlugs are url-safe base64 encoded v4 uuids, stripped of base64 `=` padding.\r\n\r\nThere are two methods for generating slugs - `slugid.V4()` and\r\n`slugid.Nice()`.\r\n\r\n* The `slugid.V4()` method returns a slug from a randomly generated v4 uuid.\r\n* The `slugid.Nice()` method returns a v4 slug which conforms to a set of\r\n  \"nice\" properties. At the moment the only \"nice\" property is that the slug\r\n  starts with `[A-Za-f]`, which in turn implies that the first (most\r\n  significant) bit of its associated uuid is set to 0.\r\n\r\nThe purpose of the `slugid.Nice()` method is to support having slugids which\r\ncan be used in more contexts safely. Regular slugids can safely be used in\r\nurls, and for example in AMQP routing keys. However, slugs beginning with `-`\r\nmay cause problems when used as command line parameters.\r\n\r\nIn contrast, slugids generated by the `slugid.Nice()` method can safely be\r\nused as command line parameters. This comes at a cost to entropy (121 bits vs\r\n122 bits for regular v4 slugs).\r\n\r\nSlug consumers should consider carefully which of these two slug generation\r\nmethods to call. Is it more important to have maximum entropy, or to have\r\nslugids that do not need special treatment when used as command line\r\nparameters? This is especially important if you are providing a service which\r\nsupplies slugs to unexpecting tool developers downstream, who may not realise\r\nthe risks of using your regular v4 slugs as command line parameters, especially\r\nsince this would arise only as an intermittent issue (one time in 64).\r\n\r\nGenerated slugs take the form `[A-Za-z0-9_-]{22}`, or more precisely:\r\n\r\n* `slugid.V4()` slugs conform to\r\n  `[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]`\r\n\r\n* `slugid.Nice()` slugs conform to\r\n  `[A-Za-f][A-Za-z0-9_-]{7}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]`\r\n\r\nRFC 4122 defines the setting of 6 bits of the v4 UUID which implies v4 slugs\r\nprovide 128 - 6 = 122 bits entropy. Due to the (un)setting of the first bit\r\nof \"nice\" slugs, nice slugs provide therefore 121 bits entropy.\r\n\r\n\r\nGo library usage\r\n----------------\r\n\r\n```go\r\nimport \"github.com/taskcluster/slugid-go/slugid\"\r\n\r\n...\r\n\r\n// Generate \"nice\" URL-safe base64 encoded UUID version 4 (random)\r\nslug := slugid.Nice()  // a8_YezW8T7e1jLxG7evy-A\r\n\r\n// Alternative, if slugs will not be used as command line parameters\r\nslug := slugid.V4()    // -9OpXaCORAaFh4sJRk7PUA\r\n\r\n// Get [UUID](https://godoc.org/code.google.com/p/go-uuid/uuid#UUID) from slug\r\nuuid := slugid.Decode(slug)\r\n\r\n// Get slug from [UUID](https://godoc.org/code.google.com/p/go-uuid/uuid#UUID)\r\nslug := slugid.Encode(uuid)\r\n```\r\n\r\nInstalling command line tool\r\n----------------------------\r\n\r\n__Binary installation__\r\n\r\nDownload the slug command line tool for your platform from\r\n[here](https://github.com/taskcluster/slugid-go/releases).\r\n\r\n__Source installation__\r\n\r\nRequirements:\r\n\r\n  * go (golang) v1.4 or higher\r\n  * `${GOPATH}/bin` is in your path\r\n\r\nRun:\r\n\r\n```\r\ngo get github.com/taskcluster/slug-go/slug\r\n```\r\n\r\nCommand line usage\r\n------------------\r\n\r\n\r\n```\r\nUsage:\r\n  slug [-n|--nice|-r|--v4] [COUNT]\r\n  slug encode [UUID...|-]\r\n  slug decode [SLUGID...|-]\r\n  slug -h|--help\r\n  slug -v|--version\r\n\r\n  slug [-n|--nice|-r|--v4] [COUNT]  Generates new slug(s). If -r or --v4 is\r\n                                    provided, regular v4 UUID are used for\r\n                                    generating the slug(s). In all other cases\r\n                                    (-n, --nice, or *no* option) \"nice\" slugs\r\n                                    are generated. COUNT specifies how many\r\n                                    slugs to generate, default is one. Slugs\r\n                                    are output on separate lines.\r\n\r\n  slug decode (-|[SLUGID...])       Outputs the v4 UUID(s) represented by the\r\n                                    given SLUGID(s), or slugid(s) passed via\r\n                                    standard in (one per line) if '-' is\r\n                                    provided. UUID(s) are output one per line,\r\n                                    in the order they were specified. If no\r\n                                    slugids are provided as command line options\r\n                                    or via '-' option, slug generates no output\r\n                                    and exits successfully.\r\n\r\n  slug encode (-|[UUID...])         Outputs the SLUGID(s) represented by the\r\n                                    given UUID(s), or UUID(s) passed via\r\n                                    standard in (one per line) if '-' is\r\n                                    provided. SLUGIDs are output one per line,\r\n                                    in the order they were specified. If no\r\n                                    UUIDs are provided as command line options\r\n                                    or via '-' option, slug generates no output\r\n                                    and exits successfully.\r\n\r\n  slug -h|--help                    Displays this help page.\r\n\r\n  slug -v|--version                 Displays the version of the slug command\r\n                                    line tool.\r\n\r\n\r\nExit Codes:\r\n\r\n   0: Success\r\n   1: Unrecognised command line options\r\n  64: Cannot decode invalid slug into a UUID\r\n  65: Problem reading standard input during slug decoding\r\n  66: Cannot encode invalid uuid into a slug\r\n  67: Problem reading standard input during slug encoding\r\n  68: Invalid value passed in for command line option COUNT\r\n```\r\n\r\n__Examples__\r\n\r\n```\r\n  $ slug 10\r\n  RDBdHcXuTUq5ghG1wMTArQ\r\n  BwwjV68MS3aQpkJynFZg9w\r\n  QjbIAaOlSK-in5Hveh0T4w\r\n  YGw68ONSR76wruU85RnvjA\r\n  M0eS8zm5RE2qKKURM_1q9g\r\n  ET23t51DSS2c57PA24QQGg\r\n  cu9mg-T6Rem9LuXBdHd9Ig\r\n  OxghknAoS9ORYPocd9HFUg\r\n  Yg6Yei4QQl-iqdZ3udJlLw\r\n  Ek924JDBRGeA6t6PiNz6UQ\r\n\r\n  $ slug --v4 2\r\n  -0eS8zm5RE2qKKURM_1q9g\r\n  OxghknAoS9ORYPocd9HFUg\r\n\r\n  $ slug decode OxghknAoS9ORYPocd9HFUg SJZbHUBSQLaichv2auLqGQ EChNNJAyS0SeUMlRWCnJ1A\r\n  3b182192-7028-4bd3-9160-fa1c77d1c552\r\n  48965b1d-4052-40b6-a272-1bf66ae2ea19\r\n  10284d34-9032-4b44-9e50-c9515829c9d4\r\n\r\n  $ echo 'f47ac10b-58cc-4372-a567-0e02b2c3d479 81d6bb7e-985c-409b-af6c-4721b4a38ec6' \\\r\n              | tr ' ' '\\n' | slug encode -\r\n  9HrBC1jMQ3KlZw4CssPUeQ\r\n  gda7fphcQJuvbEchtKOOxg\r\n\r\n  $ slug 5 | slug decode -\r\n  3405ed8e-e39f-4a3c-a0ea-e107950757f5\r\n  1df41b41-18a2-4d85-bdde-8a73f02a5014\r\n  5fe568dd-6bfd-4f58-8740-17bea665c2ac\r\n  2464a287-7f82-42ad-9b7d-1e26639d569a\r\n  1c936d1b-104c-4abf-97b4-f586371e8742\r\n\r\n  $ slug 5 | slug decode | slug encode\r\n  WLjW7XpJQ5ePycx6zWF8mw\r\n  dEOJgGpARrWBm9HX9MPBSA\r\n  fBIwjdHdRyGIk5WITyqxqA\r\n  bYuEpq-SQSaZimBDmTe4Kg\r\n  LLY3KZ05QWm0cBS4rfdTaQ\r\n```\r\n\r\nRNG Characteristics\r\n-------------------\r\nUUID generation is performed by the\r\n[code.google.com/p/go-uuid/uuid](https://godoc.org/code.google.com/p/go-uuid/uuid)\r\nlibrary which in turn uses the\r\n[crypto/rand](https://golang.org/pkg/crypto/rand/#pkg-variables) standard\r\nlibrary for generating entropy. This library declares:\r\n\r\n> Reader is a global, shared instance of a cryptographically strong\r\n> pseudo-random generator.\r\n>\r\n> On Unix-like systems, Reader reads from /dev/urandom. On Linux, Reader uses\r\n> getrandom(2) if available, /dev/urandom otherwise. On Windows systems, Reader\r\n> uses the CryptGenRandom API. \r\n\r\nThe slugid library inherits these RNG characteristics.\r\n\r\nLicense\r\n-------\r\nThe `slugid` library is released on the MPL 2.0 license, see the `LICENSE`\r\nfor complete license.\r\n\r\nTesting\r\n-------\r\n\r\n```bash\r\ngo test ./...\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}